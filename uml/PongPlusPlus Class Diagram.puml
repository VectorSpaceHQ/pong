
@startuml

skinparam class {
   backgroundcolor   #b7ddfc/White
   bordercolor       black
   ArrowColor        black
}

hide enum methods
hide circle

skinparam note {
   backgroundcolor   Ivory/White
   bordercolor       black
}

package "Pong Plus Plus Classes" <<Frame>> {

class Pong {
}


class Engine {
   - settings: Settings&
   - gameStatus: GameStatus&
   - leftPaddle: GamePadStatus&
   - rightPaddle: GamePadStatus&
   - buttonState: ButtonState

   + Update(): void

   - SetupLaserCalibration(): void
   - SetupGameReady(): void
   - SetupGamePlay(): void

   - LaserCalibrationButtonChange(): void
   - ViewCalibrationButtonChange(): void
   - ReadyButtonChange(): void
   - GameOverButtonChange(): void

   - RunLaserCalibration(): void
   - RunViewCalibration(): void
   - RunGamePlay(): void

   - CheckButtonState(): void
   - ChangeGameState(newState: GameState): void

   - LoadSettings(): void
   - StoreSettings(): void
}

enum ButtonState <<enum>> {
   ButtonStateNone
   ButtonStateLeft
   ButtonStateRight
   ButtonStateBoth
   ButtonStateReset
}

package "Controller" <<Frame>> {
   
   class Controller {
   }


   class AtariPaddleDriver {
      - DT: uint8_t
      - CLK: uint8_t
      - buttonPin: uint8_t
      - hwStatus: GamePadStatus
      
      - Update(): void
      - UpdateGamePadStatus(): void
      - CheckButton(): void
      - CheckRotaryEncoder(): void
   }


   class GamePadStatus <<struct>> {
      + buttonPressed: bool
      + buttonStateChanged: bool
      + buttonTime: uint32_t
      + position: int16_t
      
      - minPosition: uint16_t
      - maxPosition: uint16_t
     
      + Increment(value: int16_t): void 
      + SetLimits(min: int16_t, max: int16_t): void
   }
}

package "Model" <<Frame>> {

   class GameStatus <<struct>> {
      + gameState: GameState
      + gameStateChanged: bool
      + viewSettingsChanged: bool
      + leftPaddleScore: Score
      + rightPaddleScore: Score
      + whoseServe: WhoServes
      
      + leftPaddleShape: Shape
      + rightPaddleShape: Shape
      + ballPaddleShape: Shape
   }

   enum GameState <<enum>> {
      GameStateInit,
      GameStateCalibrateLasers,
      GameStateCalibrateView,
      GameStateReady,
      GameStatePlay,
      GameStateGameOver
   }

   enum WhoServes <<enum>> {
      LeftPlayerServes,
      RightPlayerServes,
      EitherPlayerServes
   }

   class Vertex {
      + x: CoordType
      + y: CoordType
      + draw: bool

      + Log(): void
   }

   enum CoordSet <<enum>> {
      CoordsWorld
      CoordsView
   }

   class Shape {
      + scale: uint16_t
      + viewScale: uint16_t
      + numVertices: uint32_t
      + vertices: Vertex[MAX_VERTICES]
      + viewVertices: Vertex[MAX_VERTICES]

      + position: Vertex
      + velocity: Vertex
      + acceleration: uint32_t

      + highestVertex: Vertex
      + lowestVertex: Vertex
      + leftMostVertex: Vertex
      + rightMostVertex: Vertex

      + Reset(): void
      + CreateShape(numeral int): void
      + AddVertex(x: CoordType, y: CoordType, draw: bool): void
      + CopyVerticesToView(): void

      + Move(set: CoordSet, diffX: CoordType, diffY: CoordType): void
      + Scale(set: CoordSet, scale: CoorType): void
      + SetOrientation(set: CoordSet, scaleX: CoordType, scaleY: CoordType): void
      + Add(set: CoordSet, x: CoordType, y: CoordType)

      + CheckTop(top: CoorType, foundVertex: Vertex&): bool
      + CheckBottom(bottom: CoorType, foundVertex: Vertex&): bool
      + CheckLeft(left: CoorType, foundVertex: Vertex&): bool
      + CheckRight(right: CoorType, foundVertex: Vertex&): bool
      
      + Height(): int16_t
      + Width(): int16_t
   }

   class Settings <<struct>> {
      + checksum: uint8_t
      + leftLaserCal: LaserCalibration
      + middleLaserCal: LaserCalibration
      + rightLaserCal: LaserCalibration
      + display: DisplaySettings
   }

   class LaserCalibration <<struct>> {
      + xOffset: int32_t
      + yOffset: int32_t
      + xOrientation: int32_t
      + yOrientation: int32_t
   }

   class DisplaySettings <<struct>> {
      + xMin: int32_t
      + yMin: int32_t
      + xMax: int32_t
      + yMax: int32_t
      + hSkew: uint32_t
      + vSkew: uint32_t
   }

   Settings *-- "3" LaserCalibration
   Settings *-- DisplaySettings

   GameStatus *-- "3" Shape
   GameStatus *-- GameState
   GameStatus *-- WhoServes

   note bottom of Shape
      To save code space, Shape maintains two sets
      of vertices: 1) World (for the game engine)
      and 2) View (for the view).
   end note
}

package "View" <<Frame>> {
   class View {
      - settings: Settings&
      - gameStatus: gameStatus&
      - leftPaddleLaser: LaserDriver
      - rightPaddleLaser: LaserDriver
      - ballLaser: LaserDriver
      
      - CheckGameStateChange(): void
      
      - SetupLaserCalibration(): void
      - SetupViewCalibration(): void
      - SetupGamePlay(): void
      - SetupGameReady(): void
      - SetupGameOver(): void
      
      - DisplayLaserCalibration(): void
      - DisplayViewCalibration(): void
      - DisplayGamePlay(): void
      - DisplayScore(): void
   }
   
   class LaserDriver {
      - name: const char*
      - cal: LaserCalibration&
      - shape: Shape&
      - x: uint32_t
      - y: uint32_t
      - oldX: uint32_t
      - oldY: uint32_t
      - xPin: uint8_t
      - yPin: uint8_t
      - laserPin: uint8_t
      - hSkew: uint32_t
      - vSkew: uint32_t
      - laserOn: bool
      - xServo: Servo
      - yServo: Servo
      - currentVertex: uint32_t
      - currentPosition: Vertex
      - destination: Vertex
      - step: Vertex
      
      + UpdateShape(scale: uint32_t, restart: boot, needToCopy: bool): void
      + SetPosition(atX: CoordType, atY: CoordType): void
      + Move(atX: CoordType, atY: CoordType): void
      + On(): void
      + Off(): void
      + Toggle(): void
      + Update(): void
      
      - SetLaser(): void
      - SetLaser(onOff: bool)
      - Move(dest: Vertex&)
      - SetWaitTime(x: int32_t, y: int32_t)
   }
   
   View *-- "3" LaserDriver
   LaserDriver --> Shape
   View --> Settings
}

Pong *-- View
Pong *-- Engine
Pong *-- Controller
Controller *-- "2" AtariPaddleDriver
Controller *-- "2" GamePadStatus
AtariPaddleDriver "1" --> "1" GamePadStatus: Updates
Engine -down-> "Reads" GamePadStatus
Engine -down-> "Updates" GameStatus 
Engine *-left- ButtonState
View -left-> "Reads" GameStatus 

note right of Pong
   The Pong class contains a
   Controller, Engine, and View
end note

note top of Model
   <b>Type Definitions:</b>
      - CoordType: int32_t
      - Score: uint8_t
end note

}

@enduml
